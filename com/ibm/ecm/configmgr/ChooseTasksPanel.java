//package freshcmui.gui;
package com.ibm.ecm.configmgr;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;

import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author 06269B744
 */
public class ChooseTasksPanel extends javax.swing.JFrame {

	StringBuffer sbout = new StringBuffer();
	private static String appServer;
	
    /**
     * Creates new form ChooseTasksPanel
     */
    public ChooseTasksPanel(String appServer) {
    	this.appServer = appServer;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Select the tasks that you want to include in this profile");

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("The profile consists of individual configuration tasks that provide information about your FileNet P8 environment.");

        jCheckBox1.setSelected(false);
        jCheckBox1.setText("Choose License");
        jCheckBox1.setToolTipText("");
        jCheckBox1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBox1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        jCheckBox2.setSelected(true);
        jCheckBox2.setText("Configure GCD JDBC Data Sources");

        jCheckBox3.setSelected(true);
        jCheckBox3.setText("Configure Object Store JDBC Data Sources");

        jCheckBox4.setSelected(true);
        jCheckBox4.setText("Configure Login Modules");

        jCheckBox5.setSelected(true);
        jCheckBox5.setText("Configure LDAP");

        jCheckBox6.setSelected(true);
        jCheckBox6.setText("Deploy Application");
        jCheckBox6.setToolTipText("");

        jCheckBox7.setText("Deploy Update");
        
        if(appServer.equals("WebLogic Application Server"))
        {
        	System.out.println(appServer);
        	jCheckBox4.setSelected(false);
        	jCheckBox4.setEnabled(false);
        }

        jSeparator2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jSeparator1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jButton1.setText("Cancel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Finish");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Next >");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("< Back");
        jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox2)
                            .addComponent(jCheckBox1)
                            .addComponent(jCheckBox3)
                            .addComponent(jCheckBox4)
                            .addComponent(jCheckBox5)
                            .addComponent(jCheckBox6)
                            .addComponent(jCheckBox7))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jSeparator1)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(8, 8, 8)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
	
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        //new ChooseLicFrame().setVisible(true);
    	String profName = CMUtil.profileName;
    	//System.out.println("ProfileName selected : " + profName);
    	JOptionPane.showMessageDialog(null, "Generating tasks for " + profName + ". Click Ok to proceed.", "Console View", JOptionPane.INFORMATION_MESSAGE);
    	//JOptionPane.showMessageDialog(rootPane, "Generating tasks for " + profName + ". Click Ok to proceed.");
    	String consoleOP = exec(profName);
    	getContentPane();
    	String file2 = NewJFrame.filePath+"\\"+profName+"\\applicationserver.xml";
    	System.out.println(file2);
    	try {
			DocumentBuilderFactory documentFactory = DocumentBuilderFactory.newInstance();
	        DocumentBuilder documentBuilder = documentFactory.newDocumentBuilder(); 
	        Document doc2 = documentBuilder.parse(new File(file2));
	        NodeList nd1 = doc2.getElementsByTagName("property");
            for(int i=0;i<nd1.getLength();i++)
            {
            	Node p = nd1.item(i);
            	if(p.getNodeType() == Node.ELEMENT_NODE)
            	{
            		  Element property = (Element)p;
					  String name = property.getAttribute("name");
					  if(name.equalsIgnoreCase("ApplicationServerVersion"))
					  {
					  NodeList nd2 = property.getChildNodes();
					  for(int j=0;j<nd2.getLength();j++)
					  {
						  Node q = nd2.item(j);
						  if(q.getNodeType()== Node.ELEMENT_NODE)
						  {
							  Element value = (Element)q;
							  if(value.getTagName().equalsIgnoreCase("value"))
							  {
								  value.setTextContent(CMUtil.appServerVersion);
								  System.out.println(value.getTagName()+" , "+value.getTextContent());
							  }
						  }
					  }
					  }
					  if(name.equalsIgnoreCase("ApplicationServerInstallationFolder"))
					  {
					  NodeList nd2 = property.getChildNodes();
					  for(int j=0;j<nd2.getLength();j++)
					  {
						  Node q = nd2.item(j);
						  if(q.getNodeType()== Node.ELEMENT_NODE)
						  {
							  Element value = (Element)q;
							  if(value.getTagName().equalsIgnoreCase("value"))
							  {
								  value.setTextContent(CMUtil.appServerInstallFolder);
								  System.out.println(value.getTagName()+" , "+value.getTextContent());
							  }
						  }
					  }
					  }
					  if(name.equalsIgnoreCase("ApplicationServerAdminUsername"))
					  {
					  NodeList nd2 = property.getChildNodes();
					  for(int j=0;j<nd2.getLength();j++)
					  {
						  Node q = nd2.item(j);
						  if(q.getNodeType()== Node.ELEMENT_NODE)
						  {
							  Element value = (Element)q;
							  if(value.getTagName().equalsIgnoreCase("value"))
							  {
								  value.setTextContent(CMUtil.appServerAdminUser);
								  System.out.println(value.getTagName()+" , "+value.getTextContent());
							  }
						  }
					  }
					  }
					  if(name.equalsIgnoreCase("ApplicationServerAdminPassword"))
					  {
					  NodeList nd2 = property.getChildNodes();
					  for(int j=0;j<nd2.getLength();j++)
					  {
						  Node q = nd2.item(j);
						  if(q.getNodeType()== Node.ELEMENT_NODE)
						  {
							  Element value = (Element)q;
							  if(value.getTagName().equalsIgnoreCase("value"))
							  {
								  value.setTextContent(CMUtil.appServerAdminPassword);
								  System.out.println(value.getTagName()+" , "+value.getTextContent());
							  }
						  }
					  }
					  }
					  if(name.equalsIgnoreCase("ApplicationServerSoapPort"))
					  {
					  NodeList nd2 = property.getChildNodes();
					  for(int j=0;j<nd2.getLength();j++)
					  {
						  Node q = nd2.item(j);
						  if(q.getNodeType()== Node.ELEMENT_NODE)
						  {
							  Element value = (Element)q;
							  if(value.getTagName().equalsIgnoreCase("value"))
							  {
								  value.setTextContent(CMUtil.appServerSOAP);
								  System.out.println(value.getTagName()+" , "+value.getTextContent());
							  }
						  }
					  }
					  }
					  if(name.equalsIgnoreCase("ApplicationServerHostName"))
					  {
					  NodeList nd2 = property.getChildNodes();
					  for(int j=0;j<nd2.getLength();j++)
					  {
						  Node q = nd1.item(j);
						  if(q.getNodeType()== Node.ELEMENT_NODE)
						  {
							  Element value = (Element)q;
							  if(value.getTagName().equalsIgnoreCase("value"))
							  {
								  value.setTextContent(CMUtil.appServerHostName);
								  System.out.println(value.getTagName()+" , "+value.getTextContent());
							  }
						  }
					  }
					  }
					  if(name.equalsIgnoreCase("ApplicationServerTransactionTimeout"))
					  {
					  NodeList nd2 = property.getChildNodes();
					  for(int j=0;j<nd2.getLength();j++)
					  {
						  Node q = nd2.item(j);
						  if(q.getNodeType()== Node.ELEMENT_NODE)
						  {
							  Element value = (Element)q;
							  if(value.getTagName().equalsIgnoreCase("value"))
							  {
								  value.setTextContent(CMUtil.appServerTimeout);
								  System.out.println(value.getTagName()+" , "+value.getTextContent());
							  }
						  }
					  }
					  }
					  if((appServer.equalsIgnoreCase("websphere"))||(appServer.startsWith("WebSphere")))
					  {
						  if(name.equalsIgnoreCase("ApplicationServerProfileFolder"))
						  {
						  NodeList nd2 = property.getChildNodes();
						  for(int j=0;j<nd2.getLength();j++)
						  {
							  Node q = nd2.item(j);
							  if(q.getNodeType()== Node.ELEMENT_NODE)
							  {
								  Element value = (Element)q;
								  if(value.getTagName().equalsIgnoreCase("value"))
								  {
									  value.setTextContent(CMUtil.appServerProfile);
									  System.out.println(value.getTagName()+" , "+value.getTextContent());
								  }
							  }
						  }
						  }
						  if(name.equalsIgnoreCase("ApplicationServerCell"))
						  {
						  NodeList nd2 = property.getChildNodes();
						  for(int j=0;j<nd2.getLength();j++)
						  {
							  Node q = nd2.item(j);
							  if(q.getNodeType()== Node.ELEMENT_NODE)
							  {
								  Element value = (Element)q;
								  if(value.getTagName().equalsIgnoreCase("value"))
								  {
									  value.setTextContent(CMUtil.appServerCell);
									  System.out.println(value.getTagName()+" , "+value.getTextContent());
								  }
							  }
						  }
						  }
						  if(name.equalsIgnoreCase("TurnOffSSLCerticates"))
						  {
						  NodeList nd2 = property.getChildNodes();
						  for(int j=0;j<nd2.getLength();j++)
						  {
							  Node q = nd2.item(j);
							  if(q.getNodeType()== Node.ELEMENT_NODE)
							  {
								  Element value = (Element)q;
								  if(value.getTagName().equalsIgnoreCase("value"))
								  {
									  value.setTextContent(CMUtil.turnOffSSL);
									  System.out.println(value.getTagName()+" , "+value.getTextContent());
								  }
							  }
						  }
						  }
						  if(name.equalsIgnoreCase("SecurityDomain"))
						  {
						  NodeList nd2 = property.getChildNodes();
						  for(int j=0;j<nd2.getLength();j++)
						  {
							  Node q = nd2.item(j);
							  if(q.getNodeType()== Node.ELEMENT_NODE)
							  {
								  Element value = (Element)q;
								  if(value.getTagName().equalsIgnoreCase("value"))
								  {
									  value.setTextContent(CMUtil.securityDomain);
									  System.out.println(value.getTagName()+" , "+value.getTextContent());
								  }
							  }
						  }
						  }
					  }
					  else if((CMUtil.appServer.equals("weblogic"))||(CMUtil.appServer.startsWith("WebLogic")))
					  {
					  if(name.equalsIgnoreCase("ApplicationServerSSLEnabled"))
					  {
					  NodeList nd2 = property.getChildNodes();
					  for(int j=0;j<nd2.getLength();j++)
					  {
						  Node q = nd2.item(j);
						  if(q.getNodeType()== Node.ELEMENT_NODE)
						  {
							  Element value = (Element)q;
							  if(value.getTagName().equalsIgnoreCase("value"))
							  {
								  value.setTextContent(CMUtil.SSLEnabled);
								  System.out.println(value.getTagName()+" , "+value.getTextContent());
							  }
						  }
					  }
					  }
					  if(name.equalsIgnoreCase("ApplicationServerDomainDirectory"))
					  {
					  NodeList nd2 = property.getChildNodes();
					  for(int j=0;j<nd2.getLength();j++)
					  {
						  Node q = nd2.item(j);
						  if(q.getNodeType()== Node.ELEMENT_NODE)
						  {
							  Element value = (Element)q;
							  if(value.getTagName().equalsIgnoreCase("value"))
							  {
								  value.setTextContent(CMUtil.appServerDomain);
								  System.out.println(value.getTagName()+" , "+value.getTextContent());
							  }
						  }
					  }
					  }
					  if(name.equalsIgnoreCase("TargetName"))
					  {
					  NodeList nd2 = property.getChildNodes();
					  for(int j=0;j<nd2.getLength();j++)
					  {
						  Node q = nd2.item(j);
						  if(q.getNodeType()== Node.ELEMENT_NODE)
						  {
							  Element value = (Element)q;
							  if(value.getTagName().equalsIgnoreCase("value"))
							  {
								  value.setTextContent(CMUtil.targetName);
								  System.out.println(value.getTagName()+" , "+value.getTextContent());
							  }
						  }
					  }
					  }
            	}
            	}
            }
		TransformerFactory transformerFactory = TransformerFactory.newInstance();
		  Transformer transformer = transformerFactory.newTransformer(); 
		  DOMSource domSource = new DOMSource(doc2); 
		  StreamResult streamResult = new StreamResult(file2);
		  
		  transformer.transform(domSource, streamResult);
		  
		  System.out.println("Done creating XML File");
		  }
		  catch(DOMException |
				  ParserConfigurationException | SAXException | IOException | TransformerException de) {
				  de.printStackTrace(); 
		  }
        new NewJFrame(profName, consoleOP).setVisible(true);
        
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    	if(appServer.equals("WebLogic Application Server")) {
    		new WL_FreshProfile(appServer).setVisible(true);
    		dispose();
    	}
    	else if(appServer.equals("WebSphere Application Server")) {
    		new WAS_FreshProfile(appServer).setVisible(true);
            dispose();
    	}
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    public String exec(String profName) {
    	
    	String EMPTY_STRING = "";
    	String command = EMPTY_STRING;
		String jvmargs = EMPTY_STRING;
		String arguments = EMPTY_STRING;
		String workingDir = "C:\\Program Files\\IBM\\FileNet\\ContentEngine\\tools\\configure";
		File workingDirf = new File(workingDir);
		//arguments+= "\"" + script + "\"";
		//jvmargs += " all com.filenet.gcd.LicenseModel ABCD";
		//command = "wsadmin.bat" + arguments + jvmargs;
		//command = "wsadmin.bat -conntype SOAP -port 8882 -host localhost -lang jython -f C:\\WASConnection\\WASConnect\\fetchcell.py";
		if(CMUtil.appServer.startsWith("WebSphere")){
			command = "configmgr_cl generateconfig -appserver WebSphere -db "+CMUtil.dbType+" -ldap "+CMUtil.ldapServerType+" -license uvu -repositorytype "+CMUtil.ldapRepoType+" -deploy "+CMUtil.deployMode+" -profile "+profName;
		}
		else {
			command = "configmgr_cl generateconfig -appserver WebLogic -db "+CMUtil.dbType+" -ldap "+CMUtil.ldapServerType+" -license uvu -deploy standard -profile "+profName;
		}
		
		System.out.println(command);
		//StringBuffer sbout = new StringBuffer();
		
		try {
			Process p;

			// if(CMUtil.isWinOS()) {
			// Windows environment, proceed with old way
			String cmdArray[] = new String[] { "cmd.exe", "/C", command };
			ProcessBuilder pb = new ProcessBuilder(cmdArray);
			pb.directory(workingDirf);
			p = pb.start();

			InputStream inputstream = p.getInputStream();
			InputStream errorStream = p.getErrorStream();

			//StringBuffer sbout = new StringBuffer();
			StringBuffer sberr = new StringBuffer();

			new OutputProcessor(inputstream, sbout);
			new OutputProcessor(errorStream, sberr);

			p.waitFor();
			inputstream.close();
			errorStream.close();
			
			//Copy existing working profile into new profile
			/*String destProfPath = workingDir + File.separator + "profiles" + File.separator + profName;
			File dstPath = new File(destProfPath);
			String srcProfPath = workingDir + File.separator + "profiles" + File.separator + "2301swasprf";
			File srcPath = new File (srcProfPath);
			FileUtil.copyDirectory(srcPath, dstPath);
			File srcFile = new File(dstPath+File.separator + profName+".cfgp");
			File dstFile = new File(srcPath+File.separator + "2301swasprf.cfgp");
			File orgcfgp = new File(dstPath + File.separator + "2301swasprf.cfgp");
			FileUtil.copy(srcFile, dstFile);
			//System.out.println(orgcfgp);
			if (orgcfgp.exists() && orgcfgp.isFile())
				orgcfgp.delete();
			*/
	    } catch (Exception ioe) {
			// ecmdb00776196:
			// when the process executing the command fails,
			// it usually includes the command passed, which may contain the password in
			// plain text
			ioe.printStackTrace();
			//String localizedMsg1 = ioe.getLocalizedMessage();
	    }
		return sbout.toString();
    } 
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChooseTasksPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChooseTasksPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChooseTasksPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChooseTasksPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChooseTasksPanel(appServer).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables
}
